____________QUESTIONS_____________

Aufgabe 1:
- free  displays  the  total amount of free and used physical and swap memory in the system,
as well as the
buffers and caches used by the kernel.
The information is gathered by  parsing  /proc/meminfo.  The  dis‐
played columns are:

   total  Total installed memory (MemTotal and SwapTotal in /proc/meminfo)

   used   Used memory (calculated as total - free - buffers - cache)

   free   Unused memory (MemFree and SwapFree in /proc/meminfo)

   shared Memory used (mostly) by tmpfs (Shmem in /proc/meminfo)

   buffers
          Memory used by kernel buffers (Buffers in /proc/meminfo)

   cache  Memory used by the page cache and slabs (Cached and SReclaimable in /proc/meminfo)

   buff/cache
          Sum of buffers and cache

   available
          Estimation of how much memory is available for starting new applications, without swapping. Unlike
          the data provided by the cache or free fields, this field takes into account page cache  and  also
          that not all reclaimable memory slabs will be reclaimed due to items being in use (MemAvailable in
          /proc/meminfo, available on kernels 3.14, emulated on kernels 2.6.27+, otherwise the same as free)

Aufgabe 2:

- free -h:
an851goe@ct-bsys-ws20-18:~/z-drive/BSYS2020$ free -h
              total        used        free      shared  buff/cache   available
Mem:          2,0Gi       1,6Gi        25Mi        68Mi       394Mi       419Mi
Swap:         3,0Gi       0,0Ki       3,0Gi

- Insgesamt hat das System 2GB zur Verfügung, es sind noch 25MB ungenutzt
-> 410 MB verfügbar für neue Prozesse
- Die Nummern passen, wobei relativ viel schon vergeben ist, während kein Prozess läuft und alles nur das OS beansprucht


Aufgabe 3:

- siehe memory-user.c

Aufgabe 4:

Free ohne andere Prozesse:

an851goe@ct-bsys-ws20-18:~$ free
              total        used        free      shared  buff/cache   available
Mem:        2097152     1585232       78548       70928      433372      511920
Swap:       3145728          12     3145716

Free mit memory-user.c 10 Megabyte:

an851goe@ct-bsys-ws20-18:~$ free
              total        used        free      shared  buff/cache   available
Mem:        2097152     1597104       64656       71156      435392      500048
Swap:       3145728          12     3145716

-> Benutzte Memory geht nach oben -> Freies Memory nach unten -> Verfügbares geht auch nach unten,
wie angenommen belegt das Programm ein Teil der Memory

an851goe@ct-bsys-ws20-18:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:           2048        1549          72          69         425         498
Swap:          3072           0        3071

an851goe@ct-bsys-ws20-18:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:           2048        1559          63          69         425         488
Swap:          3072           0        3071

-> Mit 10 MB allocated, verbraucht das Program etwa gleich viel
wie der Befehl Free anzeigt ca. 10 MB verbrauch bei free, used und available

an851goe@ct-bsys-ws20-18:~$ free -m
              total        used        free      shared  buff/cache   available
Mem:           2048        1950           0          58          97          97
Swap:          3072         334        2737

-> Wenn sie verbraucht wirt, dann kommt der Swap ins Spiel bei dem es dann diese Restlichen anzeigt

Aufgabe 5:

-  The pmap command reports the memory map of a process or processes.

Aufgabe 6+7:

- Siehe Aufgabe6+7.txt für mehr Daten
- Bei der normalen Variante (-x) sieht man die jeweilige Adresse,
die KBytes, den RSS, den Dirty Bit,
welchen Modus und das Mapping was alles zu dem jeweiligen Prozess gehört, was gerade gemacht wird
-> Mit -X oder -XX sieht man sehr viel andere zusätzliche Informationen die heutzutage in einem Adress Space benutzt werden,
anstatt unserem Konzeption von code/stack/heap
-> Dazu wird der Stack/Heap angezeigt


Aufgabe 8:

Address           Kbytes     RSS   Dirty Mode  Mapping
0000562b865ce000       4       4       0 r---- memory-user
0000562b865cf000       4       4       0 r-x-- memory-user
0000562b865d0000       4       4       0 r---- memory-user
0000562b865d1000       4       4       4 r---- memory-user
0000562b865d2000       4       4       4 rw--- memory-user
0000562b883a3000     132       4       4 rw---   [ anon ]
00007f06ebe53000    9768    9768    9768 rw---   [ anon ]  --> 10 MB im HEAP
00007f06ec7dd000     136     136       0 r---- libc-2.28.so
00007f06ec7ff000    1312     952       0 r-x-- libc-2.28.so
00007f06ec947000     304     100       0 r---- libc-2.28.so
00007f06ec993000       4       0       0 ----- libc-2.28.so
00007f06ec994000      16      16      16 r---- libc-2.28.so
00007f06ec998000       8       8       8 rw--- libc-2.28.so
00007f06ec99a000      24      20      20 rw---   [ anon ]
00007f06ec9b0000       4       4       0 r---- ld-2.28.so
00007f06ec9b1000     120     120       0 r-x-- ld-2.28.so
00007f06ec9cf000      32      32       0 r---- ld-2.28.so
00007f06ec9d7000       4       4       4 r---- ld-2.28.so
00007f06ec9d8000       4       4       4 rw--- ld-2.28.so
00007f06ec9d9000       4       4       4 rw---   [ anon ]
00007fff12777000     132      12      12 rw---   [ stack ]
00007fff1279b000      12       0       0 r----   [ anon ]
00007fff1279e000       4       4       0 r-x--   [ anon ]
ffffffffff600000       4       0       0 --x--   [ anon ]

-> Man sieht viel weniger prozesse die einwirken auf das Programm -> Ein paar Bibliotheks Aufrufe
-> Nichts spezielles was jetzt von den anderen Programmen anderst ist.