Questions:

Aufgabe 1:

- Die Funktion gettimeofday() kann Sekunden und Microsekunden der derzeitigen Zeit angeben
- Eine Operation muss mindestens 1 - 10 Microsekunden lang laufen, damit man diese gescheit angeben kann (tv_usec -> Kleinste Einheit die man mit gettimeofday() angeben kann)

- rdtsc() -> Counts the number of Cycles since last reset
(Funktioniert nicht sehr gut mit MultiThreading, multiple CPU´s) -> TimeStamp ist nicht synchronisiert bei mehreren CPU´s


Aufgabe 2:

// Speziell für unseren Container -> //CPU 4,7-8,11 sind Möglich -> "cat /sys/fs/cgroup/cpuset/cpuset.cpus"
-> Es sind insgesmt 4 CPUs auf dem System vorhanden

-> 4 Threads (MacOS -> 8 CPUs)
(venv) ➜  Chapter29 git:(master) ✗ ./concurrentCounter 1000
Number of Increments by each Thread:  1000
Counter is: 4000
counterAccessTime: 1074295 ns
counterAccessTime in Sekunden: 0.001074 s
(venv) ➜  Chapter29 git:(master) ✗ ./concurrentCounter 1000
Number of Increments by each Thread:  1000
Counter is: 4000
counterAccessTime: 1235954 ns
counterAccessTime in Sekunden: 0.001236 s

-> 3 Threads (MacOS)
(venv) ➜  Chapter29 git:(master) ✗ ./concurrentCounter 1000
Number of Increments by each Thread:  1000
Counter is: 3000
counterAccessTime: 808983 ns
counterAccessTime in Sekunden: 0.000809 s
(venv) ➜  Chapter29 git:(master) ✗ ./concurrentCounter 1000
Number of Increments by each Thread:  1000
Counter is: 3000
counterAccessTime: 948980 ns
counterAccessTime in Sekunden: 0.000949 s

-> Genau eigentlich die Zeit die der Thread braucht weniger

-> Die Nummer der CPUS hält den TImer nicht sonderlich auf


Aufgabe 3:

S = 1 -> Time: ca. 800000 ns
S = 2 -> TIme ca. 700000 ns
S = 4 -> Time ca. 500000 ns
S = 128 -> TIme ca. 400000ns


-> Es ist nicht ganz wie im Buch, man erkennt aber die Zeit Veringerrung durch den Threshold
-> Die Zeit erhöht sich auch nur ein Bisschen pro Thread -> Zeit bleibt ungefähr bei 0 s

-> Bei dem normalen Counter ging es bei mehr Threads schnell auf höhere Zahlen


Aufgabe 4:

TODO


Aufgabe 5:


TODO


Aufgabe 6:


TODO



