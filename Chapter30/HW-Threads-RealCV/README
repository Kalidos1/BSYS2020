This homework lets you explore some real code that uses locks and condition
variables to implement various forms of the producer/consumer queue discussed
in the chapter. You'll look at the real code, run it in various
configurations, and use it to learn about what works and what doesn't, as well
as other intricacies.

The different versions of the code correspond to different ways to "solve"
the producer/consumer problem. Most are incorrect; one is correct.  Read the
chapter to learn more about what the producer/consumer problem is, and what
the code generally does.

The first step is to download the code and type make to build all the
variants. You should see four:

- main-one-cv-while.c: The producer/consumer problem solved with a
single condition variable.
- main-two-cvs-if.c: Same but with two condition variables and using
an if to check whether to sleep.
- main-two-cvs-while.c: Same but with two condition variables and while to
check whether to sleep. This is the correct version.
- main-two-cvs-while-extra-unlock.c: Same but releasing the lock and
then reacquiring it around the fill and get routines.

It's also useful to look at pc-header.h which contains common code for
all of these different main programs, and the Makefile so as to build the
code properly.

Each program takes the following flags: 

  -l <number of items each producer produces>
  -m <size of the shared producer/consumer buffer>
  -p <number of producers>
  -c <number of consumers>
  -P <sleep string: how producer should sleep at various points>
  -C <sleep string: how consumer should sleep at various points>
  -v [verbose flag: trace what is happening and print it]
  -t [timing flag: time entire execution and print total time]


The first four arguments are relatively self-explanatory: -l specifies how
many times each producer should loop (and thus how many data items each
producer produces), -m controls the size of the shared buffer (greater than or
equal to one), and -p and -c set how many producers and consumers there are,
respectively.

What is more interesting are the two sleep strings, one for producers, and one
for consumers. These flags allow you to make each thread sleep at certain
points in an execution and thus switch to other threads; doing so allows you
to play with each solution and perhaps pinpoint specific problems or study
other facets of the producer/consumer problem.

The string is specified as follows. If there are three producers, for example,
the string should specify sleep times for each producer separately, with a 
colon separator. The sleep string for these three producers would look
something like this:

  sleep_string_for_p0:sleep_string_for_p1:sleep_string_for_p2 

Each sleep string, in turn, is a comma-separated list, which is used to
decide how much to sleep at each sleep point in the code. To understand this
per-producer or per-consumer sleep string better, let's look at the code in
main-two-cvs-while.c, specifically at the producer code. In this code
snippet, a producer thread loops for a while, putting elements into the shared
buffer via calls to do\_fill(). Around this filling routine are some
waiting and signaling code to ensure the buffer is not full when the producer
tries to fill it. See the chapter for more details.

void *producer(void *arg) {
    int id = (int) arg;
    int i;
    for (i = 0; i < loops; i++) {   p0;
        Mutex_lock(&m);             p1;
        while (num_full == max) {   p2;
            Cond_wait(&empty, &m);  p3;
        }
        do_fill(i);                 p4;
        Cond_signal(&fill);         p5;
        Mutex_unlock(&m);           p6;
    }
    return NULL;
}

As you can see from the code, there are a number of points labeled p0, p1,
etc. These points are where the code can be put to sleep. The consumer code
(not shown here) has similar wait points (c0, etc.).

Specifying a sleep string for a producer is easy: just identify how long the
producer should sleep at each point p0, p1, ..., p6. For example, the string
1,0,0,0,0,0,0 specifies that the producer should sleep for 1 second at marker
p0 (before grabbing the lock), and then not at all each time through the loop.

Now let's show the output of running one of these programs.  To begin, let's
assume that the user runs with just one producer and one consumer. Let's not
add any sleeping at all (this is the default behavior). The buffer 
size, in this example, is set to 2 (-m 2).

First, let's build the code:

prompt> make
gcc -o main-two-cvs-while main-two-cvs-while.c -Wall -pthread
gcc -o main-two-cvs-if main-two-cvs-if.c -Wall -pthread
gcc -o main-one-cv-while main-one-cv-while.c -Wall -pthread
gcc -o main-two-cvs-while-extra-unlock main-two-cvs-while-extra-unlock.c 
  -Wall -pthread

Now we can run something:

prompt> ./main-two-cvs-while -l 3 -m 2 -p 1 -c 1 -v

In this case, if you trace the code (with the verbose flag, -v), you will get
the following output (or something like it) on the screen:

 NF             P0 C0
  0 [*---  --- ] p0
  0 [*---  --- ]    c0
  0 [*---  --- ] p1
  1 [u  0 f--- ] p4
  1 [u  0 f--- ] p5
  1 [u  0 f--- ] p6
  1 [u  0 f--- ] p0
  1 [u  0 f--- ]    c1
  0 [ --- *--- ]    c4
  0 [ --- *--- ]    c5
  0 [ --- *--- ]    c6
  0 [ --- *--- ]    c0
  0 [ --- *--- ] p1
  1 [f--- u  1 ] p4
  1 [f--- u  1 ] p5
  1 [f--- u  1 ] p6
  1 [f--- u  1 ] p0
  1 [f--- u  1 ]    c1
  0 [*---  --- ]    c4
  0 [*---  --- ]    c5
  0 [*---  --- ]    c6
  0 [*---  --- ]    c0
  0 [*---  --- ] p1
  1 [u  2 f--- ] p4
  1 [u  2 f--- ] p5
  1 [u  2 f--- ] p6
  1 [u  2 f--- ]    c1
  0 [ --- *--- ]    c4
  0 [ --- *--- ]    c5
  0 [ --- *--- ]    c6
  1 [f--- uEOS ] [main: added end-of-stream marker]
  1 [f--- uEOS ]    c0
  1 [f--- uEOS ]    c1
  0 [*---  --- ]    c4
  0 [*---  --- ]    c5
  0 [*---  --- ]    c6

Consumer consumption:
  C0 -> 3

Before describing what is happening in this simple example, let's understand
the depiction of the shared buffer in the output, as is shown on the left. At
first it is empty (an empty slot indicated by ---, and the two empty slots
shown as [*--- --- ]); the output also shows the number of entries in the
buffer (num\_full), which starts at 0. Then, after P0 puts a value in it, its
state changes to [u 0 f--- ] (and num\_full changes to 1). You might also
notice a few additional markers here; the u marker shows where the use\_ptr is
(this is where the next consumer to consume a value will get something from);
similarly, the f marker shows where the fill\_ptr is (this is where
the next producer will produce a value). When you see the * marker, it
just means the use\_ptr and fill\_ptr are pointing to the same slot.

Along the right you can see the trace of which step each producer and consumer
is about to execute. For example, the producer grabs the lock (p1), and then,
because the buffer has an empty slot, produces a value into it (p4). It then
continues until the point where it releases the lock (p6) and then tries
to reacquire it. In this example, the consumer acquires the lock instead and
consumes the value (c1, c4). Study the trace further to understand
how the producer/consumer solution works with a single producer and consumer.

Now let's add some pauses to change the behavior of the trace. In this case,
let's say we want to make the producer sleep so that the consumer can run
first. We can accomplish this as follows: 

prompt> ./main-two-cvs-while -l 1 -m 2 -p 1 -c 1 -P 1,0,0,0,0,0,0 -C 0 -v

The results:
 NF             P0 C0
  0 [*---  --- ] p0
  0 [*---  --- ]    c0
  0 [*---  --- ]    c1
  0 [*---  --- ]    c2
  0 [*---  --- ] p1
  1 [u  0 f--- ] p4
  1 [u  0 f--- ] p5
  1 [u  0 f--- ] p6
  1 [u  0 f--- ] p0
  1 [u  0 f--- ]    c3
  0 [ --- *--- ]    c4
  0 [ --- *--- ]    c5
  0 [ --- *--- ]    c6
  0 [ --- *--- ]    c0
  0 [ --- *--- ]    c1
  0 [ --- *--- ]    c2
 ...

As you can see, the producer hits the p0 marker in the code and then grabs
the first value from its sleep specification, which in this case is 1, and
thus each sleeps for 1 second before even trying to grab the lock. Thus, the
consumer gets to run, grabs the lock, but finds the queue empty, and thus
sleeps (releasing the lock). The producer then runs (eventually), and all
proceeds as you might expect.

Do note: a sleep specification must be given for each producer and
consumer. Thus, if you create two producers and three consumers (with -p 2 -c
3, you must specify sleep strings for each (e.g., -P 0:1 or -C
0,1,2:0:3,3,3,1,1,1). Sleep strings can be shorter than the number of sleep
points in the code; the remaining sleep slots are initialized to be zero.


____________________________QUESTIONS___________________________-


Question 1:


- do_fill() -> Checkt ob der BUffer nicht leer ist, wenn er leer ist, wird er mit dem Parameter gefüllt und der Buffergröße erhöht
- do_get() -> Checkt ob der Buffer nicht leer ist, wenn ja, dann wird er auf empty gesetzt und der Parameter zurückgegeben

- producer() -> Loopt für eine gewisse Anzahl und produziert mit do_fill() neue Einträge, jedoch nur, wenn nicht der consumer das Lock hat und der Buffer nicht bei MAX ist
- consumer() -> Loopt bis END_OF_STREAM und konsumiert mit do_get die Buffer Einträge, jedoch nur, wenn nicht der producer das Lock hat oder der Buffer leer ist


Question 2:

./main-two-cvs-while -l 5 -m 1 -p 1 -c 1 -v -t
 NF        P0 C0
  0 [*--- ] p0
  0 [*--- ]    c0
  0 [*--- ] p1
  1 [*  0 ] p4
  1 [*  0 ] p5
  1 [*  0 ] p6
  1 [*  0 ] p0
  1 [*  0 ] p1
  1 [*  0 ] p2
  1 [*  0 ]    c1
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ]    c0
  0 [*--- ]    c1
  0 [*--- ]    c2
  0 [*--- ] p3
  1 [*  1 ] p4
  1 [*  1 ] p5
  1 [*  1 ] p6
  1 [*  1 ] p0
  1 [*  1 ]    c3
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ]    c0
  0 [*--- ]    c1
  0 [*--- ]    c2
  0 [*--- ] p1
  1 [*  2 ] p4
  1 [*  2 ] p5
  1 [*  2 ] p6
  1 [*  2 ] p0
  1 [*  2 ] p1
  1 [*  2 ] p2
  1 [*  2 ]    c3
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ]    c0
  0 [*--- ]    c1
  0 [*--- ]    c2
  0 [*--- ] p3
  1 [*  3 ] p4
  1 [*  3 ] p5
  1 [*  3 ] p6
  1 [*  3 ] p0
  1 [*  3 ] p1
  1 [*  3 ] p2
  1 [*  3 ]    c3
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ]    c0
  0 [*--- ] p3
  1 [*  4 ] p4
  1 [*  4 ] p5
  1 [*  4 ] p6
  1 [*  4 ]    c1
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ]    c0
  0 [*--- ]    c1
  0 [*--- ]    c2
  1 [*EOS ] [main: added end-of-stream marker]
  1 [*EOS ]    c3
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6

Consumer consumption:
  C0 -> 5

Total time: 0.00 seconds

./main-two-cvs-while -l 5 -m 4 -p 1 -c 1 -v -t
 NF                       P0 C0
  0 [*---  ---  ---  --- ] p0
  0 [*---  ---  ---  --- ]    c0
  0 [*---  ---  ---  --- ] p1
  1 [u  0 f---  ---  --- ] p4
  1 [u  0 f---  ---  --- ] p5
  1 [u  0 f---  ---  --- ] p6
  1 [u  0 f---  ---  --- ] p0
  1 [u  0 f---  ---  --- ] p1
  2 [u  0    1 f---  --- ] p4
  2 [u  0    1 f---  --- ] p5
  2 [u  0    1 f---  --- ] p6
  2 [u  0    1 f---  --- ] p0
  2 [u  0    1 f---  --- ]    c1
  1 [ --- u  1 f---  --- ]    c4
  1 [ --- u  1 f---  --- ]    c5
  1 [ --- u  1 f---  --- ]    c6
  1 [ --- u  1 f---  --- ]    c0
  1 [ --- u  1 f---  --- ]    c1
  0 [ ---  --- *---  --- ]    c4
  0 [ ---  --- *---  --- ]    c5
  0 [ ---  --- *---  --- ]    c6
  0 [ ---  --- *---  --- ]    c0
  0 [ ---  --- *---  --- ] p1
  1 [ ---  --- u  2 f--- ] p4
  1 [ ---  --- u  2 f--- ] p5
  1 [ ---  --- u  2 f--- ] p6
  1 [ ---  --- u  2 f--- ] p0
  1 [ ---  --- u  2 f--- ] p1
  2 [f---  --- u  2    3 ] p4
  2 [f---  --- u  2    3 ] p5
  2 [f---  --- u  2    3 ] p6
  2 [f---  --- u  2    3 ] p0
  2 [f---  --- u  2    3 ]    c1
  1 [f---  ---  --- u  3 ]    c4
  1 [f---  ---  --- u  3 ]    c5
  1 [f---  ---  --- u  3 ]    c6
  1 [f---  ---  --- u  3 ]    c0
  1 [f---  ---  --- u  3 ]    c1
  0 [*---  ---  ---  --- ]    c4
  0 [*---  ---  ---  --- ]    c5
  0 [*---  ---  ---  --- ]    c6
  0 [*---  ---  ---  --- ]    c0
  0 [*---  ---  ---  --- ] p1
  1 [u  4 f---  ---  --- ] p4
  1 [u  4 f---  ---  --- ] p5
  1 [u  4 f---  ---  --- ] p6
  1 [u  4 f---  ---  --- ]    c1
  0 [ --- *---  ---  --- ]    c4
  0 [ --- *---  ---  --- ]    c5
  0 [ --- *---  ---  --- ]    c6
  1 [ --- uEOS f---  --- ]    c0
  1 [ --- uEOS f---  --- ] [main: added end-of-stream marker]
  1 [ --- uEOS f---  --- ]    c1
  0 [ ---  --- *---  --- ]    c4
  0 [ ---  --- *---  --- ]    c5
  0 [ ---  --- *---  --- ]    c6

Consumer consumption:
  C0 -> 5

Total time: 0.00 seconds

-> Mit einem Größeren Buffer kommt öfters auch der Producer mehrmals dran -> 2 Einträge auf einmal
-> Eine kleine geringere Code-Zeilen Menge
-> Jedoch ist nicht ein sehr großer Unterschied erkennbar


NUM_FULL:

Different Buffer Sizes:
- Nie komplett voll, könnte aber theoretisch sein, wenn der Producer 10 Einträge hat und die alle sofort reinschreibt
-> Die Wahrscheinlichkeit ist aber hoch, das dabei ein Consumer eingeschaltet wird, der diese Einträge wieder runternimmt
-> Schwer vorherzusagen was passiert

Number of Prduced Items:
- Mit 100 Einträgen pro Producer ist die Wahrscheinlichkeit hoch, dass auch der Buffer mal voll ist -> 9 Einträge
-> Sind relativ viele Einträge und 1 Consumer kann nicht sehr effizient alle EInträge behandeln

Sleep String:

- Mit diesem Sleep String wird der Buffer komplett voll geschrieben, und dann erst danach wird immer wieder der Consumer eingeschalten um 1 Eintrag zu konsumieren
-> Jedoch wird sofort danach wieder 1 Eintrag nachgelegt
-> Hierbei wird zu wenig konsumiert (Sleeped) was zur folge hat, dass das Program sehr lange läuft
-> Total time: 101.24 seconds


Question 3:

- ./main-two-cvs-while -l 100 -m 10 -p 1 -c 1 -v -t

-> Bei diesem Beispiel ist ein kleiner Unterschied zwischen Mac und Linux:
-> Bei Mac wird hierbei der Buffer von Zeit zu Zeit relativ groß gefüllt, wobei bei Linux immer der Buffer meistens zwischen 0 und 1 wechselt, da sofort nach einem Producer der Consumer kommt

Question 4:

- Da der Consumer 1s wartet bei c3 dauert es bei 10 Einträgen ungefähr bisschen mehr als 10 Sekunden (End-Of-Stream Time, etc.)
Consumer consumption:
  C0 -> 5
  C1 -> 2
  C2 -> 3

Total time: 11.02 seconds


Question 5:

- Da sich die Zeit nicht verändert sondern nur der Buffer ändert es sich nichts im VErgleich zu Aufgabe 4
-> Da der Consumer 1s wartet und immer nur 1 Consumer drann ist, ändert es sich nichts an der Zeit
-> Auch wenn der Buffer voller wird und der Producer möglicherweise mehr als 1 Item reinschreiben kann
ändert sich in dem Fall nichts


Question 6:

- Müsste schneller gehen, da die Stelle an dem der Consumer schlafen gelegt wird, nicht die anderen Consumer auch verhindert
-> Der Consumer gibt das Lock frei und während der Consumer schläft, können andere Threads, dieses lock acquiren und damit dann weiterverfahren
-> Ca. kann man dann die vorheirge Zeit durch 3 teilen

Consumer consumption:
  C0 -> 4
  C1 -> 3
  C2 -> 3

Total time: 5.01 seconds

Question 7:

- Es wird sich wieder nicht ändern an der Zeit, da es wieder draufankommt wie oft ein Consumer läuft, und dieser dann 1s dann schläft
- Dabei ändert sich nichts, von der Zeit des Producers her

-> In dem ersten Beispiel wird alles Linear consumiert -> 1 Producer-1 Consumer, usw.
-> Mit Buffer Größe 3 -> 3 -> Producer -> 1 Consumer -> 1 Consumer -> 1 Consumer -> usw.


Question 8:

- Mit nur einem CV ist das Problem, dass ein Thread nicht weis, wem er als nächstes das Signal senden soll
- Dementsprechend kann man mit nur 1 Producer und 1 Consumer kein Problem darstellen


Question 9:

./main-one-cv-while -p 1 -c 2 -m 1 -P 0,0,0,1,0,0,0 -C 0,0,0,1,0,0,0:0,0,0,1,0,0,0 -l 5 -v -t

-> Mit diesem String, kann man ein Deadlock verursachen, indem ein Consumer Thread einem anderen Thread signalisiert
jedoch den falschen Thread nimmt (Consumer) und der dann kein Eintrag zum holen hat und somit stuck ist
-> Der Producer schläft hierbei auch, da er von niemandem geweckt wird
-> Und der Consumer hängt auch, da es kein Eintrag gibt den er Consumen kann


Question 10:

-> Mit einem Producer und Consumer gibt es wieder keine Probleme
-> Mit 2 Consumer kann man ein Problem erstellen:
./main-two-cvs-if -p 1 -c 2 -m 1 -C 0,0,1,0,0,0,0:0,0,1,0,0,0,0 -l 5 -v -t -> error: tried to get an empty buffer
(GEHT NUR AUF CONTAINER, NICHT AUF MAC)

Question 11:

-> Wenn man das Get und Fill nicht mit Locks sichert, dann könnte man mit dem Producer sleepen ohne zu fillen und dann mit dem Consumer getten ohne das was drinn ist
./main-two-cvs-while-extra-unlock -p 1 -c 2 -m 10 -l 10 -v -C 0,0,0,0,1,0,0:0,0,0,0,0,0,0

-> Der erste Consumer konsumiert nur einen Wert


